import { useState, useRef, useMemo } from 'react'
import {
  getNotifications,
  markAsRead,
  markAllAsRead,
  deleteNotification,
  deleteAllNotifications,
} from '@/services/notificationService'
import { useClickAway } from 'react-use'
import useSWR from 'swr'

interface Notification {
  id: number
  user_id: string
  notification_type: string
  message: string
  link: string | null
  read_status: boolean
  notification_date: string
}

const useNotifications = (user: any) => {
  const [openNotification, setOpenNotification] = useState<boolean>(false)
  const notificationRef = useRef<HTMLDivElement | null>(null)
  const [selectedNotifications, setSelectedNotifications] = useState<number[]>([])
  const [error, setError] = useState<string | null>(null)

  useClickAway(notificationRef, () => {
    if (openNotification) setOpenNotification(false)
  })

  // ‚úÖ Fetch th√¥ng b√°o v·ªõi useSWR (t·ª± ƒë·ªông c·∫≠p nh·∫≠t m·ªói 5 gi√¢y)
  const { data: notifications = [], error: fetchError, mutate } = useSWR(
    user ? '/api/notifications' : null,
    getNotifications,
    {
      refreshInterval: 5000, // Ki·ªÉm tra th√¥ng b√°o m·ªõi m·ªói 5 gi√¢y
      revalidateOnFocus: true, // T·ª± ƒë·ªông fetch l·∫°i khi quay l·∫°i tab
      revalidateOnReconnect: true, // Fetch l·∫°i khi c√≥ m·∫°ng
    }
  )

  if (fetchError && !error) setError('L·ªói khi t·∫£i th√¥ng b√°o')

  // üîπ ƒê·∫øm s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc
  const unreadCount = useMemo(() => {
    return notifications.filter((n) => !n.read_status).length
  }, [notifications])

  // ‚úÖ Gi·ªØ nguy√™n logic: Khi ng∆∞·ªùi d√πng g·ªçi h√†m n√†y m·ªõi g·ª≠i API
  const handleMarkAsRead = async () => {
    if (selectedNotifications.length === 0) return
    try {
      await markAsRead(selectedNotifications) // G·ª≠i API ƒë√°nh d·∫•u t·∫•t c·∫£ ƒë√£ ƒë·ªçc
      mutate() // ‚úÖ Fetch l·∫°i danh s√°ch m·ªõi t·ª´ API
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'C√≥ l·ªói x·∫£y ra'
      setError(`L·ªói khi ƒë√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc: ${errorMessage}`)
    } finally {
      setSelectedNotifications([]) // ‚úÖ Reset danh s√°ch sau khi g·ªçi API
    }
  }

  // ‚úÖ Gi·ªØ nguy√™n logic: Ch·ªâ c·∫≠p nh·∫≠t selectedNotifications, kh√¥ng g·ªçi API
  const handleMarkAsReadOnClick = (id: number) => {
    // C·∫≠p nh·∫≠t giao di·ªán hi·ªÉn th·ªã l√† ƒë√£ ƒë·ªçc
    mutate(
      (prevData: Notification[] = []) =>
        prevData.map((notif) =>
          notif.id === id ? { ...notif, read_status: true } : notif
        ),
      false // ‚ö†Ô∏è Kh√¥ng g·ªçi l·∫°i API ngay, ch·ªâ c·∫≠p nh·∫≠t UI t·∫°m th·ªùi
    )
  
    // Th√™m ID v√†o selectedNotifications n·∫øu ch∆∞a c√≥
    setSelectedNotifications((prevSelected) =>
      prevSelected.includes(id) ? prevSelected : [...prevSelected, id]
    )
  }
  

  // üîπ ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
  const handleMarkAllAsRead = async () => {
    // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c b·∫±ng c√°ch ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
    mutate(
      (prevData: Notification[] = []) =>
        prevData.map((notif) => ({ ...notif, read_status: true })), // ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
      false // ‚ùå Kh√¥ng g·ªçi l·∫°i API, ch·ªâ c·∫≠p nh·∫≠t UI
    )
  
    try {
      // G·ªçi API ƒë·ªÉ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
      await markAllAsRead()
    } catch{
      setError('L·ªói khi ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc')
    }
  }  

  // üîπ X√≥a 1 th√¥ng b√°o
  const handleDeleteNotification = async (id: number) => {
    // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c m√† kh√¥ng g·ªçi l·∫°i API
    mutate(
      (prevData: Notification[] = []) =>
        prevData.filter((notif) => notif.id !== id),
      false // ‚ùå Kh√¥ng g·ªçi API l·∫°i, ch·ªâ update UI
    )
  
    try {
      // G·ªçi API ƒë·ªÉ x√≥a th√¥ng b√°o
      await deleteNotification(id)
    } catch{
      setError('L·ªói khi x√≥a th√¥ng b√°o')
    }
  }
  

  // üîπ X√≥a t·∫•t c·∫£ th√¥ng b√°o
  const handleDeleteAllNotifications = async () => {
    // C·∫≠p nh·∫≠t UI ngay l·∫≠p t·ª©c b·∫±ng c√°ch x√≥a t·∫•t c·∫£ th√¥ng b√°o t·ª´ danh s√°ch
    mutate(
      (_: Notification[] = []) => [], 
      false // ‚ùå Kh√¥ng g·ªçi l·∫°i API, ch·ªâ c·∫≠p nh·∫≠t UI
    )
    
    
    try {
      // G·ªçi API ƒë·ªÉ x√≥a t·∫•t c·∫£ th√¥ng b√°o
      await deleteAllNotifications()
    } catch{
      setError('L·ªói khi x√≥a t·∫•t c·∫£ th√¥ng b√°o')
    }
  }
  

  return {
    notifications,
    openNotification,
    setOpenNotification,
    notificationRef,
    error,
    unreadCount,
    selectedNotifications, // ‚úÖ Tr·∫£ v·ªÅ selectedNotifications ƒë·ªÉ ki·ªÉm tra danh s√°ch ƒë√£ ch·ªçn
    handleMarkAsReadOnClick,
    handleMarkAsRead,
    handleMarkAllAsRead,
    handleDeleteNotification,
    handleDeleteAllNotifications,
  }
}

export default useNotifications
